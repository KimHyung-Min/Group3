<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BookMapper">

    <!--도서정보입력-->
    <insert id="insertBook" parameterType="book">
        INSERT INTO BOOK(isbn, publisher_number, genre, total_page, price, title, stock, author, publication_date,
        content, keyword)
        VALUES (#{isbn}, #{publisherNumber}, #{genre}, #{totalPage}, #{price}, #{title}, #{stock}, #{author},
        #{publicationDate}, #{content}, #{keyword})
    </insert>

    <!--도서 리스트-->
    <select id="bookList" resultMap="getBook">
        <![CDATA[
        select b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
               b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
               b.CONTENT content, b.KEYWORD keyword
        from book b inner join PUBLISHER P on P.PUBLISHER_NUMBER = b.PUBLISHER_NUMBER
        ORDER BY ISBN DESC
        ]]>
    </select>

    <!--선택한 ISBN의 도서정보-->
    <select id="selectBook" resultMap="getBook">
        <![CDATA[
        select b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
               b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
               b.CONTENT content, b.KEYWORD keyword
        from book b inner join PUBLISHER P on P.PUBLISHER_NUMBER = b.PUBLISHER_NUMBER
        WHERE ISBN = #{isbn}
        ]]>
    </select>

    <!--선택한 ISBN의 도서정보 삭제-->
    <delete id="deleteBook" parameterType="book">
        <![CDATA[
        DELETE
        FROM book
        WHERE ISBN = #{isbn}
        ]]>
    </delete>

    <!--선택한 ISBN의 도서정보 업데이트-->
    <update id="updateBook" parameterType="book">
        <![CDATA[
        UPDATE book
        SET PRICE= #{price},
            CONTENT= #{content}
        WHERE ISBN = #{isbn}
        ]]>
    </update>



    <!--메뉴에서 선택한 종류의 책정보 리스트-->
    <select id="genrebookList" parameterType="String" resultMap="getBook">
        <![CDATA[
        select b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
               b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
               b.CONTENT content, b.KEYWORD keyword
        from book b inner join PUBLISHER P on P.PUBLISHER_NUMBER = b.PUBLISHER_NUMBER
        WHERE GENRE = #{GENRE}
        ]]>
    </select>

    <!-- 구매시 책의 재고 빼주기 -->
    <update id="deleteStock" parameterType="purchaseBook">
        UPDATE BOOK
        SET STOCK = STOCK - #{quantity}
        WHERE ISBN = #{isbn}
    </update>

    <!-- 취소된 책의 재고 다시 증가-->
    <update id="cancelStock" parameterType="purchaseBook">
        UPDATE BOOK
        SET STOCK = STOCK + #{quantity}
        WHERE ISBN = #{isbn}
    </update>

    <select id="searchBook" parameterType="hashmap" resultMap="getBook">
        select b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
        b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
        b.CONTENT content, b.KEYWORD keyword
        from book b inner join PUBLISHER P on P.PUBLISHER_NUMBER = b.PUBLISHER_NUMBER
        <where>
            <!--
            title like #{keyword} or
            author like #{keyword} or
            genre like #{keyword} or
            keyword like #{keyword}-->
            <choose>
                <when test='sbox == "title"'>
                    title like '%'||#{find}||'%'
                </when>
                <when test='sbox == "author"'>
                    author like '%'||#{find}||'%'
                </when>
                <when test='sbox == "genre"'>
                    genre like '%'||#{find}||'%'
                </when>
                <when test='sbox == "keyword"'>
                    keyword like '%'||#{find}||'%'
                </when>
                <otherwise>
                    title like '%'||#{find}||'%'
                    or
                    author like '%'||#{find}||'%'
                    or
                    genre like '%'||#{find}||'%'
                    or
                    keyword like '%'||#{find}||'%'
                </otherwise>
            </choose>

        </where>
    </select>

    <!--장르별 통계-->
    <select id="getGenreSalesList" resultType="map">
        select genre, sum(s.amount_price) price
        from SALES_DATA s INNER JOIN BOOK B on s.isbn = B.ISBN
        GROUP BY genre
    </select>

    <!--월별 매출 리스트-->
    <select id="salesList" parameterType="hashmap" resultType="int">

        select sum(sd.amount_price) amountprice
        from sales_Data sd
        INNER JOIN(SELECT pb.order_number order_number
        FROM purchase_book pb
        INNER JOIN (SELECT *
        FROM purchase
        WHERE state='결제완료' AND to_char(sysdate,'yy')=substr(purchase_date,1,2) AND
        substr(purchase_date,3,4)= '/'||#{month}||'/') p
        ON p.order_number = pb.order_number) pb
        ON sd.order_number = pb.order_number
    </select>

    <!--30 매출 리스트-->
    <select id="ageList" parameterType="hashmap" resultType="int">
        <![CDATA[
        SELECT sum(sd.amount_price) amountprice
        FROM sales_data sd
        INNER JOIN(select pb.order_number
        from purchase_book pb
        inner join(SELECT p.order_number
        FROM purchase p
        INNER JOIN (SELECT *
        FROM member
        WHERE (to_char(sysdate,'yyyy')+1 -(substr(jumin1,0,2)+
        (case
        when substr(jumin2,0,1) <3 then 1900
        when substr(jumin2,0,1) >=3 then 2000
        end))) between 30 and 39) m
        ON p.membertel = m.tel
        WHERE state='결제완료' AND to_char(sysdate,'yy')=substr(purchase_date,1,2) AND
        substr(purchase_date,3,4)='/'||#{month}||'/')p
        ON p.order_number = pb.order_number) pb
        ON sd.order_number = pb.order_number
        ]]>

    </select>

    <!--20대 매출 리스트-->
    <select id="twentypriceList" parameterType="hashmap" resultType="int">
        <![CDATA[
        SELECT sum(sd.amount_price) amountprice
        FROM sales_data sd
                 INNER JOIN(select pb.order_number
                            from purchase_book pb
                                     inner join(SELECT p.order_number
                                                FROM purchase p
                                                         INNER JOIN (SELECT *
                                                                     FROM member
                                                                     WHERE (to_char(sysdate,'yyyy')+1 -(substr(jumin1,0,2)+
                                                                                                        (case
                                                                                                             when substr(jumin2,0,1) <3 then 1900
                                                                                                             when substr(jumin2,0,1) >=3 then 2000
                                                                                                            end))) between 20 and 29) m
                                                                    ON p.membertel = m.tel
                                                WHERE state='결제완료' AND to_char(sysdate,'yy')=substr(purchase_date,1,2) AND
                                                    substr(purchase_date,3,4)='/'||#{month}||'/')p
                                               ON p.order_number = pb.order_number) pb
                           ON sd.order_number = pb.order_number


          ]]>

    </select>

    <!--10대 40대 매출리스트-->
    <select id="teenageList" parameterType="hashmap" resultType="int">

        SELECT sum(sd.amount_price) amountprice
        FROM sales_data sd
        INNER JOIN(select pb.order_number
        from purchase_book pb
        inner join(SELECT p.order_number
        FROM purchase p
        INNER JOIN (SELECT *
        FROM member
        WHERE (to_char(sysdate,'yyyy')+1 -(substr(jumin1,0,2)+
        (case
        when substr(jumin2,0,1) <![CDATA[<]]>3 then 1900
        when substr(jumin2,0,1) >=3 then 2000
        end)))
        <choose>
            <when test="age != null and age==1">
                between 10 and 19
            </when>
            <when test="age != null and age==4">
                between 40 and 49
            </when>
            <otherwise>
                between 30 and 39
            </otherwise>
        </choose>


        ) m
        ON p.membertel = m.tel
        WHERE state='결제완료' AND to_char(sysdate,'yy')=substr(purchase_date,1,2) AND
        substr(purchase_date,3,4)='/'||#{month}||'/')p
        ON p.order_number = pb.order_number) pb
        ON sd.order_number = pb.order_number

    </select>

    <select id="daychart" parameterType="hashmap" resultType="int">
        <![CDATA[
        select sum(amount_price) amountprice
        from sales_Data sd
                 INNER JOIN(SELECT pb.order_number order_number
                            FROM purchase_book pb
                                     INNER JOIN (SELECT *
                                                 FROM purchase
                                                 WHERE state='결제완료' AND to_char(sysdate,'yy')=substr(purchase_date,1,2) AND
                                                     to_char(purchase_date,'mm-dd')=to_char(sysdate-#{day},'mm-dd')) p
                                                ON p.order_number = pb.order_number) pb
                           ON sd.order_number = pb.order_number
        ]]>

    </select>



    <select id="carouselBook" resultType="book">
        <![CDATA[
        SELECT isbn,title, author,publication_date
        FROM (select * from BOOK
        ORDER BY PUBLICATION_DATE desc)
        Where rownum <=10
        ]]>
    </select>

    <select id="bestBook" resultMap="getBook">

        SELECT s.isbn isbn, s.amountquantity amountquantity, b.title
        FROM(select isbn, SUM(amount_quantity) amountquantity
        from sales_Data
        GROUP BY ISBN
        ORDER BY SUM(amount_quantity) DESC) s
        INNER JOIN book b on s.isbn=b.isbn
        WHERE rownum <![CDATA[<]]>=3
    </select>

    <select id="hotBook" parameterType="String" resultMap="getBook">
        SELECT *
        FROM book b
        INNER JOIN( select isbn, sum(total_price) totalprice, sum(pb.quantity) quantity
        from purchase_book pb
        INNER JOIN(SELECT *
        FROM purchase p
        INNER JOIN(  SELECT *
        FROM member
        WHERE (to_char(sysdate,'yyyy')+1 -(substr(jumin1,0,2)+
        (case
        when substr(jumin2,0,1) <![CDATA[<]]> 3 then 1900
        when substr(jumin2,0,1) >=3 then 2000
        end))) between 30 and 39) m
        ON p.membertel = m.tel) p
        ON pb.order_number = p.order_number
        GROUP BY ISBN
        ORDER BY
        <if test="_parameter.equals('age')">
            quantity DESC
        </if>
        <if test="_parameter.equals('genre')">
            totalprice desc
        </if>
        )pb
        ON pb.isbn = b.isbn
        WHERE rownum <![CDATA[<]]>=3
    </select>

    <select id="bestbookList" resultMap="getBook">
        <![CDATA[
        SELECT b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
            b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
            b.CONTENT content, b.KEYWORD keyword, sd.amountquantity amountquantity
        FROM book b
        INNER JOIN(select isbn, sum(amount_quantity) amountquantity
                   from sales_data
                   group by isbn
                   order by amountquantity DESC) sd
        ON b.isbn=sd.isbn
        INNER JOIN PUBLISHER p
        ON p.publisher_number = b.publisher_number
]]>
    </select>

    <select id="newbookList" resultMap="getBook">
        <![CDATA[
        select b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
               b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
               b.CONTENT content, b.KEYWORD keyword
        from book b inner join publisher P on P.PUBLISHER_NUMBER = b.PUBLISHER_NUMBER
        order by b.publication_date desc
]]>
    </select>

    <select id="bookTab" resultType="book">
        select genre
        from book
        group by genre
    </select>

    <select id="memberBook" parameterType="hashmap" resultMap="getBook">
        SELECT *
        FROM book b
        INNER JOIN( select isbn, sum(total_price) totalprice, sum(pb.quantity) quantity
        from purchase_book pb
        INNER JOIN(SELECT *
        FROM purchase p
        INNER JOIN(  SELECT *
        FROM member
        WHERE (to_char(sysdate,'yyyy')+1 -(substr(jumin1,0,2)+
        (case
        when substr(jumin2,0,1) <![CDATA[<]]> 3 then 1900
        when substr(jumin2,0,1) >=3 then 2000
        end)))
        <choose>
            <when test="member != null and member==10">
                between 10 and 19
            </when>
            <when test="member != null and member==20">
                between 20 and 29
            </when>
            <when test="member != null and member==30">
                between 30 and 39
            </when>
            <when test="member != null and member==40">
                between 40 and 49
            </when>
            <otherwise>
                between 30 and 39
            </otherwise>
        </choose>
        ) m
        ON p.membertel = m.tel) p
        ON pb.order_number = p.order_number
        GROUP BY ISBN
        ORDER By
        <choose>
            <when test="genre != null and genre==1">
                quantity DESC
            </when>
            <when test="genre != null and genre==2">
                totalprice desc
            </when>
            <otherwise>
                totalprice desc
            </otherwise>
        </choose>
        )pb
        ON pb.isbn = b.isbn
        WHERE rownum <![CDATA[<]]>=3
    </select>

    <resultMap id="salesData" type="salesdata">
        <result property="isbn" column="isbn"/>
        <result property="amountQuantity" column="amount_quantity"/>
        <result property="amountPrice" column="amount_price"/>
    </resultMap>

    <resultMap id="publisher" type="publisher">
        <result property="publisherNumber" column="publisher_number"/>
        <result property="publisherName" column="publisher_name"/>
        <result property="address" column="address"/>
        <result property="tel" column="tel"/>
        <result property="url" column="url"/>
    </resultMap>

    <resultMap id="getBook" type="book">
        <result property="isbn" column="isbn"/>
        <result property="publisherNumber" column="publisher_number"/>
        <result property="genre" column="genre"/>
        <result property="totalPage" column="total_page"/>
        <result property="price" column="price"/>
        <result property="title" column="title"/>
        <result property="stock" column="stock"/>
        <result property="author" column="author"/>
        <result property="publicationDate" column="publication_date"/>
        <result property="content" column="content"/>
        <result property="keyword" column="keyword"/>
        <collection property="salesDataVO" resultMap="salesData"/>
        <collection property="publisherVO" resultMap="publisher" />
    </resultMap>

    <select id="getBookAndPublisher" resultMap="getBook">
        select b.ISBN isbn, b.PUBLISHER_NUMBER publisher_number, p.PUBLISHER_NAME publisher_name, b.GENRE genre,
               b.TOTAL_PAGE total_page, b.PRICE price, b.TITLE title, b.STOCK stock, b.AUTHOR author, b.PUBLICATION_DATE publication_date,
               b.CONTENT content, b.KEYWORD keyword
        from book b inner join PUBLISHER P on P.PUBLISHER_NUMBER = b.PUBLISHER_NUMBER
    </select>





</mapper>